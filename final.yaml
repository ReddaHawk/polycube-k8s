apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: k8s-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: polycube-config
  namespace: k8s-system
data:
  # TODO: certificate and key?
  etcd_url: "http://127.0.0.1:30901"

  # Mtu to be configured in the pods.
  # If the all nodes are running on the same datacender, 1500 can be used
  # otherwise 1450 has to be used due to the tunneling overhead
  mtu: "1450"

  # ServiceClusterIP range, should be the same as "service-cluster-ip-range"
  # passed to the api server
  # TODO: can this value be retrieved from the api server?
  serviceClusterIPRange: "10.96.0.0/12"

  # Range used for node port services, if shoudl modify it if you specified
  # the "--service-node-port-range" flag. Defailt is "30000-32767"
  # TODO: can this value be retrieved from the api server?
  serviceNodePortRange: "30000-32767"

  # range used to perform SNAT on the pods when contacting services.
  # choose any range that does not create conflict in your nodes.
  # This range MUST have the same size of the "pod-network-cidr".
  vPodsRange: "10.10.0.0/16"

  # range used for the VTEPs on the overlay network. Choose any
  # non conflicting /16 range.
  # This is a temporary workaroud and should be fixed in the near future.
  vtepsRange: "10.18.0.0/16"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-controller-manager
  namespace: k8s-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-leader-election-role
  namespace: k8s-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: k8s-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - endpoints/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - nodes/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-leader-election-rolebinding
  namespace: k8s-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-leader-election-role
subjects:
- kind: ServiceAccount
  name: k8s-controller-manager
  namespace: k8s-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-manager-role
subjects:
- kind: ServiceAccount
  name: k8s-controller-manager
  namespace: k8s-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-proxy-role
subjects:
- kind: ServiceAccount
  name: k8s-controller-manager
  namespace: k8s-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 51cfa751.polycube.io
kind: ConfigMap
metadata:
  name: k8s-manager-config
  namespace: k8s-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: k8s-controller-manager-metrics-service
  namespace: k8s-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: k8s-controller-manager
  namespace: k8s-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - name: polycubed
        image: reddahawk/polycube:debug
        imagePullPolicy: Always
        command: [ "polycubed",
                     "--loglevel=DEBUG",
                     "--addr=0.0.0.0",
                     "--logfile=/host/var/log/pcn_k8s" ]
        lifecycle:
            postStart:
              exec:
                command:
                  - "/cni-install.sh"
            preStop:
              exec:
                command:
                  - "/cni-uninstall.sh"
        env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POLYCUBE_MTU
              valueFrom:
                configMapKeyRef:
                  name: polycube-config
                  key: mtu
            - name: POLYCUBE_VPODS_RANGE
              valueFrom:
                configMapKeyRef:
                  name: polycube-config
                  key: vPodsRange
        volumeMounts:
            - name: lib-modules
              mountPath: /lib/modules
            - name: usr-src
              mountPath: /usr/src
            - name: cni-path
              mountPath: /host/opt/cni/bin
            - name: etc-cni-netd
              mountPath: /host/etc/cni/net.d
            - name: var-log
              mountPath: /host/var/log
            #- name: kubeconfig
            #  mountPath: /var/lib/pcn_k8s/
        securityContext:
            privileged: true
        ports:
            - name: polycubed
              containerPort: 9000
        terminationMessagePolicy: FallbackToLogsOnError
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: reddahawk:k8s-operator:latest
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          allowPrivilegeEscalation: false
      securityContext:
        runAsNonRoot: true
      serviceAccountName: k8s-controller-manager
      terminationGracePeriodSeconds: 10
      hostNetwork: true
      #restartPolicy: Never
      volumes:
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: usr-src
          hostPath:
            path: /usr/src
        - name: cni-path
          hostPath:
            path: /opt/cni/bin
        - name: etc-cni-netd
          hostPath:
            path: /etc/cni/net.d
        - name: var-log
          hostPath:
            path: /var/log
        - name: netns
          hostPath:
            path: /var/run/netns
        - name: proc
          hostPath:
            path: /proc/
          #- name: kubeconfig
          #configMap:
            #name: kube-proxy
      #namespace: kube-public
      tolerations:
        - effect: NoSchedule
          key: node.kubernetes.io/not-ready
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node.cloudprovider.kubernetes.io/uninitialized
          value: "true"
        - key: CriticalAddonsOnly
          operator: "Exists"

